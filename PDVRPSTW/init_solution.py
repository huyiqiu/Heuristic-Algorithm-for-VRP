from k_means import clustering
#from k_means_with_constraint import clustering
from Vhicles import Vehicle
from read_file import customers_info
from objective_func import calculate_cost
import random
from VNS import VNS


if __name__ == '__main__':
    #clusters = clustering()
    #100
    #clusters = [[4, 28, 33, 35, 44, 48, 50, 58, 89, 93], [8, 11, 19, 20, 26, 29, 32, 34, 41, 47, 54, 78, 81, 83, 92], [2, 12, 13, 21, 25, 39, 40, 51, 53, 55, 75, 77, 90, 98, 99], [22, 27, 36, 64, 65, 69, 71, 73, 84, 97], [3, 7, 14, 23, 30, 43, 45, 62, 67, 72, 79, 95, 96], [1, 15, 18, 38, 42, 57, 59, 66, 70, 76, 80, 94], [6, 24, 46, 56, 63, 68, 74, 82, 86, 88], [5, 9, 10, 16, 17, 31, 37, 49, 52, 60, 61, 85, 87, 91]]
    #500
    #clusters = [[12, 22, 55, 84, 101, 116, 122, 145, 155, 168, 203, 211, 231, 233, 251, 283, 303, 335, 342, 361, 381, 398, 401, 404, 433, 449, 452, 459, 468, 470, 481, 492], [7, 19, 20, 32, 34, 54, 62, 79, 92, 96, 105, 120, 137, 165, 184, 189, 200, 241, 252, 281, 285, 324, 356, 395, 400, 415, 425, 436, 445, 480, 485, 495], [16, 17, 23, 31, 45, 67, 85, 95, 106, 129, 139, 176, 183, 192, 206, 207, 214, 219, 228, 237, 244, 260, 294, 347, 364, 399, 405, 444, 478], [4, 48, 58, 63, 93, 94, 125, 133, 134, 135, 140, 142, 169, 236, 246, 249, 257, 258, 265, 271, 296, 309, 310, 320, 365, 378, 393, 410, 414, 428, 429, 437, 442, 465, 466, 477, 498], [10, 28, 33, 35, 44, 50, 61, 89, 111, 123, 124, 126, 161, 164, 178, 194, 196, 213, 216, 220, 242, 263, 279, 290, 299, 300, 308, 311, 333, 341, 345, 355, 377, 418, 426, 469, 494], [8, 11, 29, 41, 47, 81, 83, 117, 127, 153, 179, 193, 195, 201, 209, 217, 264, 289, 295, 305, 323, 328, 334, 348, 353, 360, 412, 419, 420, 432, 440, 441, 486, 488], [1, 15, 18, 38, 42, 57, 66, 70, 76, 91, 100, 113, 136, 143, 191, 202, 215, 275, 302, 325, 374, 376, 402, 403, 416, 446, 472, 489, 493], [5, 9, 26, 49, 52, 60, 87, 103, 109, 132, 138, 150, 177, 185, 212, 250, 255, 261, 269, 272, 277, 280, 286, 306, 316, 327, 339, 346, 363, 387, 389, 390, 397, 411, 431, 457, 479, 487, 490], [39, 51, 90, 99, 108, 121, 130, 182, 198, 199, 218, 229, 230, 232, 235, 254, 256, 259, 291, 297, 301, 322, 326, 340, 349, 359, 367, 368, 370, 380, 382, 383, 388, 409, 421, 422, 434, 454, 458, 475, 482, 483, 497], [2, 13, 21, 40, 53, 77, 147, 157, 158, 159, 160, 162, 167, 171, 205, 240, 243, 247, 278, 284, 288, 331, 336, 354, 366, 407, 443, 447, 453, 455, 467, 471, 484, 499], [3, 14, 30, 37, 43, 59, 72, 80, 102, 141, 144, 170, 172, 186, 224, 226, 234, 248, 266, 270, 298, 304, 321, 351, 357, 379, 435, 439, 461, 463, 464, 476, 491], [25, 75, 78, 98, 104, 107, 112, 114, 115, 118, 146, 173, 187, 188, 197, 208, 223, 238, 245, 262, 273, 274, 292, 293, 317, 337, 338, 369, 384, 386, 391, 408, 413, 423, 427, 460, 473], [6, 24, 46, 56, 68, 74, 82, 86, 88, 110, 119, 131, 149, 151, 163, 166, 175, 181, 204, 221, 225, 227, 268, 276, 287, 307, 318, 332, 343, 344, 352, 358, 373, 385, 396, 406, 424, 430, 438, 462], [27, 36, 64, 65, 69, 71, 73, 97, 128, 148, 152, 154, 156, 174, 180, 190, 210, 222, 239, 253, 267, 282, 312, 313, 314, 315, 319, 329, 330, 350, 362, 371, 372, 375, 392, 394, 417, 448, 450, 451, 456, 474, 496]]
    #500_2
    #clusters = [[5, 16, 31, 52, 85, 87, 91, 103, 106, 109, 132, 138, 150, 192, 206, 214, 219, 237, 250, 261, 269, 272, 277, 280, 286, 294, 339, 363, 389, 397, 399, 405, 411, 431, 479], [28, 33, 35, 44, 48, 50, 58, 89, 111, 123, 143, 164, 169, 178, 191, 196, 213, 220, 242, 263, 265, 279, 290, 299, 300, 308, 309, 333, 345, 393, 410, 414, 418], [39, 108, 121, 130, 182, 198, 199, 218, 229, 230, 232, 235, 254, 256, 283, 291, 297, 301, 322, 326, 340, 349, 359, 367, 368, 370, 380, 382, 383, 388, 401, 404, 409, 421, 422, 434, 447, 452, 453, 454, 455, 458, 467, 482], [8, 11, 29, 41, 47, 78, 81, 112, 117, 127, 153, 179, 193, 195, 201, 209, 217, 262, 273, 289, 295, 305, 323, 328, 334, 338, 353, 386, 412, 419, 423, 432, 440, 441, 460, 486], [2, 13, 21, 40, 53, 77, 90, 147, 157, 158, 159, 160, 162, 167, 171, 205, 240, 243, 247, 259, 274, 278, 284, 288, 331, 336, 337, 342, 354, 361, 366, 407, 408, 413, 427, 443], [6, 24, 46, 56, 68, 74, 82, 86, 88, 110, 131, 149, 151, 156, 163, 166, 175, 181, 204, 221, 225, 227, 276, 287, 307, 318, 332, 343, 344, 352, 358, 373, 385, 396, 406, 424, 430, 438, 448, 451, 456, 462], [3, 30, 37, 43, 72, 80, 102, 141, 224, 226, 234, 266, 298, 304, 321, 351, 357, 435, 461, 464, 476, 491, 500], [9, 10, 55, 60, 61, 84, 101, 124, 126, 155, 161, 185, 212, 216, 233, 251, 293, 306, 311, 327, 341, 355, 377, 381, 398, 426, 433, 449, 450, 457, 459, 468, 469, 470, 471, 475, 481, 483, 484, 487, 492], [7, 19, 20, 26, 32, 34, 54, 79, 83, 92, 105, 120, 137, 165, 184, 200, 241, 264, 281, 285, 324, 346, 348, 356, 360, 395, 400, 415, 420, 425, 436, 445, 473, 495], [22, 27, 36, 51, 64, 65, 69, 71, 73, 97, 99, 122, 128, 148, 152, 154, 168, 174, 180, 190, 194, 210, 222, 239, 253, 267, 282, 303, 312, 313, 314, 315, 319, 329, 330, 350, 362, 371, 372, 375, 392, 394, 417, 474], [12, 25, 49, 75, 98, 104, 107, 114, 115, 116, 118, 145, 146, 173, 177, 187, 188, 197, 203, 208, 211, 223, 231, 238, 245, 255, 292, 316, 317, 335, 369, 384, 387, 390, 391], [1, 15, 18, 38, 42, 57, 59, 66, 70, 76, 100, 113, 136, 144, 172, 202, 215, 248, 258, 275, 302, 325, 374, 376, 402, 403, 416, 446, 463, 472, 489, 493, 494], [14, 17, 23, 45, 62, 67, 95, 96, 129, 139, 170, 176, 183, 186, 189, 207, 228, 244, 252, 260, 270, 347, 364, 379, 439, 444, 478, 480, 485, 488, 490], [4, 63, 93, 94, 119, 125, 133, 134, 135, 140, 142, 236, 246, 249, 257, 268, 271, 296, 310, 320, 365, 378, 428, 429, 437, 442, 465, 466, 477, 496, 497, 498, 499]]
    clusters = clustering()
    print(clusters)
    cost_before = 0
    for cluster in clusters:
        cost_before += calculate_cost(cluster)
    print(cost_before)
    iteration = 2
    routes = []
    for i in range(len(clusters)):
        solution = VNS(clusters[i])
        for j in range(iteration):
            solution.local_search()
            f1 = calculate_cost(solution.solution)
            print("ls:", f1)
            solution.two_opt()
            f2 = calculate_cost(solution.solution)
            print("2opt:", f2)
            if f2 < f1:
                continue
            solution.three_opt()
            f3 = calculate_cost(solution.solution)
            print("3opt:", f3)
            if f3 < f2:
                continue
            solution.LNS_random()
            f4 = calculate_cost(solution.solution)
            print("LNS:", f4)
            if f4 < f3:
                continue
            solution.best_opt()
            f5 = calculate_cost(solution.solution)
            print("best 2opt:", f5)
            if f5 < f4:
                continue
        routes.append(solution.solution)
        print(solution.solution)
    print(routes)
    TOTAL = 0
    for rout in routes:
        TOTAL += calculate_cost(rout)
    print(TOTAL)
